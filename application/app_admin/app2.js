/*

 * File: app.js

 *

 * This file was generated by Sencha Architect version 2.1.0.

 * http://www.sencha.com/products/architect/

 *

 * This file requires use of the Ext JS 4.1.x library, under independent license.

 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more

 * details see http://www.sencha.com/license or contact license@sencha.com.

 *

 * This file will be auto-generated each and everytime you save your project.

 *

 * Do NOT hand edit this file.

 */



Ext.Loader.setConfig({

    enabled: true

});



Ext.application({

     models: [

        'Ponencia',

        'tipo_pon',

        'Expositor',

        'Ambiente',

        'Aula',

        'Evento'

    ],

    stores: [

        'Ponencia',

        'estado_pon',

        'ambiente',

        'Evento',

        'Dirigido',

        'tipo_pon',

        'Expositor',

        'Aula',

        'estado_eve',

        'eventoCombo',

        'tipo_documento'

    ],

    views: [

        'Main',

        'Contenedor',

        'PanelPrincipal',

        'MantenerPonencia',

        'GridEvento',

        'MantenerEvento',

        'GridExpositor',

        'MantenerExpositor'

    ],

    autoCreateViewport: true,

    name: 'vision',

    appFolder: '../../application/app_admin/app',



    launch: function() {

        sessionStorage.setItem('id_pon',-1);

        sessionStorage.setItem('id_eve',-1);

        sessionStorage.setItem('cod_exp',-1);

		Ext.getCmp('userlabel').setText(sessionStorage.nomUser, false);

		

		

		

        // Add the additional 'advanced' VTypes

        Ext.apply(Ext.form.field.VTypes, {

            daterange: function(val, field) {

                var date = field.parseDate(val);



                if (!date) {

                    return false;

                }

                if (field.startDateField && (!this.dateRangeMax || (date.getTime() != this.dateRangeMax.getTime()))) {

                    var start = field.up('form').down('#' + field.startDateField);

                    start.setMaxValue(date);

                    start.validate();

                    this.dateRangeMax = date;

                }

                else if (field.endDateField && (!this.dateRangeMin || (date.getTime() != this.dateRangeMin.getTime()))) {

                    var end = field.up('form').down('#' + field.endDateField);

                    end.setMinValue(date);

                    end.validate();

                    this.dateRangeMin = date;

                }

                /*

                * Always return true since we're only using this vtype to set the

                * min/max allowed values (these are tested for after the vtype test)

                */

                return true;

            },



            daterangeText: 'La fecha de inicio debe ser menor que la fecha final',



            validacionNumero : function(value, field) {

	   if(value>0)

	   return true

    return false;

   },



            validacionNumeroText: 'Passwords do not match',
			
			validacionDocu : function(value, field) {
			   if(!isNaN(value))
			   return true
			return false;
		
		   },
		    validacionDocuText: 'Ingrese solo numeros'

        });

		

		

    }



});

